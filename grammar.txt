statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement		: 'immutable' IDENTIFIER EQ expr
						| 'mutable' IDENTIFIER EQ expr
						| 'when' expr 'then' statement ('but when' expr 'then' statement)* ('otherwise' statement)?
						| 'task' IDENTIFIER? parameters 'returns'? type? statement
						| expr

expr        : IDENTIFIER EQ expr
            | comp-expr (('and'|'or') comp-expr)*

comp-expr   : 'not' comp-expr
            | arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  :	term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            | power

power       : call (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            | LPAREN expr RPAREN
            | list-expr
            | if-expr
            | for-expr
            | while-expr
            | func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

parameters  : LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN

type        : IDENTIFIER

if-expr     : 'when' expr 'then'
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements 'otherwise' if-expr-b|if-expr-c)

if-expr-b   : 'but when' expr 'then'
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements 'otherwise' if-expr-b|if-expr-c)

if-expr-c   : 'otherwise'
              statement
            | (NEWLINE statements 'otherwise')

for-expr    : 'repeat' expr 'times' 'then'
              statement
            | (NEWLINE statements 'otherwise')

while-expr  : 'iterate over' IDENTIFIER 'with' IDENTIFIER 'then'
              statement
            | (NEWLINE statements 'otherwise')

func-def    : 'task' IDENTIFIER?
              parameters 'returns'? type?
              statement
            | (NEWLINE statements 'otherwise')
